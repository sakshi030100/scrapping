[{"ques": "1. Who developed Python Programming Language?\n", "op1": " Wick van Rossum\n", "op2": " Rasmus Lerdorf\n", "op3": " Guido van Rossum\n", "op4": " Niene Stom\n"}, {"ques": "2. Which type of Programming does Python support?\n", "op1": " object-oriented programming\n", "op2": " structured programming\n", "op3": " functional programming\n", "op4": " all of the mentioned\n"}, {"ques": "3. Is Python case sensitive when dealing with identifiers?\n", "op1": " no\n", "op2": " yes\n", "op3": " machine dependent\n", "op4": " none of the mentioned\n"}, {"ques": "4. Which of the following is the correct extension of the Python file?\n", "op1": " .python\n", "op2": " .pl\n", "op3": " .py\n", "op4": " .p\n"}, {"ques": "5. Is Python code compiled or interpreted?\n", "op1": " Python code is both compiled and interpreted\n", "op2": " Python code is neither compiled nor interpreted\n", "op3": " Python code is only compiled\n", "op4": " Python code is only interpreted\n"}, {"ques": "6. All keywords in Python are in _________\n", "op1": " Capitalized\n", "op2": " lower case\n", "op3": " UPPER CASE\n", "op4": " None of the mentioned\n"}, {"ques": "7. What will be the value of the following Python expression?", "op1": " 7\n", "op2": " 2\n", "op3": " 4\n", "op4": " 1\n"}, {"ques": "8. Which of the following is used to define a block of code in Python language?\n", "op1": " Indentation\n", "op2": " Key\n", "op3": " Brackets\n", "op4": " All of the mentioned\n"}, {"ques": "9. Which keyword is used for function in Python language?\n", "op1": " Function\n", "op2": " Def\n", "op3": " Fun\n", "op4": " Define\n"}, {"ques": "10. Which of the following character is used to give single-line comments in Python?\n", "op1": " //\n", "op2": " #\n", "op3": " !\n", "op4": " /*\n"}, {"ques": "11. What will be the output of the following Python code?", "code": "i = 1 while True:     if i%3 == 0:         break     print(i)       i + = 1", "op1": " 1 2 3\n", "op2": " error\n", "op3": " 1 2\n", "op4": " none of the mentioned\n"}, {"ques": "12. Which of the following functions can help us to find the version of python that we are currently working on?\n", "op1": " sys.version(1)\n", "op2": " sys.version(0)\n", "op3": " sys.version()\n", "op4": " sys.version\n"}, {"ques": "13. Python supports the creation of anonymous functions at runtime, using a construct called __________\n", "op1": " pi\n", "op2": " anonymous\n", "op3": " lambda\n", "op4": " none of the mentioned\n"}, {"ques": "14. What is the order of precedence in python?\n", "op1": " Exponential, Parentheses, Multiplication, Division, Addition, Subtraction\n", "op2": " Exponential, Parentheses, Division, Multiplication, Addition, Subtraction\n", "op3": " Parentheses, Exponential, Multiplication, Division, Subtraction, Addition\n", "op4": " Parentheses, Exponential, Multiplication, Division, Addition, Subtraction\n"}, {"ques": "15. What will be the output of the following Python code snippet if x=1?", "exp": "x<<2", "op1": " 4\n", "op2": " 2\n", "op3": " 1\n", "op4": " 8\n"}, {"ques": "16. What does pip stand for python?\n", "op1": " unlimited length\n", "op2": " all private members must have leading and trailing underscores\n", "op3": " Preferred Installer Program\n", "op4": " none of the mentioned\n"}, {"ques": "17. Which of the following is true for variable names in Python?\n", "op1": " underscore and ampersand are the only two special characters allowed\n", "op2": " unlimited length\n", "op3": " all private members must have leading and trailing underscores\n", "op4": " none of the mentioned\n"}, {"ques": "18. What are the values of the following Python expressions?", "exp": " 2**(3**2)  (2**3)**2  2**3**2", "op1": " 512, 64, 512\n", "op2": " 512, 512, 512\n", "op3": " 64, 512, 64\n", "op4": " 64, 64, 64\n"}, {"ques": "19. Which of the following is the truncation division operator in Python?\n", "op1": " |\n", "op2": " //\n", "op3": " /\n", "op4": " %\n"}, {"ques": "20. What will be the output of the following Python code?", "exp": "l=[1, 0, 2, 0, 'hello', '', []] list(filter(bool, l))", "op1": " [1, 0, 2, \u2018hello\u2019, \u201d, []] \n", "op2": " Error\n", "op3": " [1, 2, \u2018hello\u2019] \n", "op4": " [1, 0, 2, 0, \u2018hello\u2019, \u201d, []] \n"}, {"ques": "21. Which of the following functions is a built-in function in python?\n", "op1": " factorial()\n", "op2": " print()\n", "op3": " seed()\n", "op4": " sqrt()\n"}, {"ques": "22. Which of the following is the use of id() function in python?\n", "op1": " Every object doesn\u2019t have a unique id\n", "op2": " Id  returns the identity of the object\n", "op3": " All of the mentioned\n", "op4": " None of the mentioned\n"}, {"ques": "23. The following python program can work with ____ parameters.", "code": "def f(x):     def f1(*args, **kwargs):            print(\"Sanfoundry\")            return x(*args, **kwargs)     return f1", "op1": " any number of\n", "op2": " 0\n", "op3": " 1\n", "op4": " 2\n"}, {"ques": "24. What will be the output of the following Python function?", "exp": "min(max(False,-3,-4), 2,7)", "op1": " -4\n", "op2": " -3\n", "op3": " 2\n", "op4": " False\n"}, {"ques": "25. Which of the following is not a core data type in Python programming?\n", "op1": " Tuples\n", "op2": " Lists\n", "op3": " Class\n", "op4": " Dictionary\n"}, {"ques": "26. What will be the output of the following Python expression if x=56.236?", "code": "print(\"%.2f\"%x)", "op1": " 56.236\n", "op2": " 56.23\n", "op3": " 56.0000\n", "op4": " 56.24\n"}, {"ques": "27. Which of these is the definition for packages in Python?\n", "op1": " A set of main modules\n", "op2": " A folder of python modules\n", "op3": " A number of files containing Python definitions and statements\n", "op4": " A set of programs making use of Python modules\n"}, {"ques": "28. What will be the output of the following Python function?", "code": "len([\"hello\",2, 4, 6])", "op1": " Error\n", "op2": " 6\n", "op3": " 4\n", "op4": " 3\n"}, {"ques": "29. What will be the output of the following Python code?", "code": "x = 'abcd' for i in x:     print(i.upper())", "op1": " a B C D\n", "op2": " a b c d\n", "op3": " error\n", "op4": " A B C D\n"}, {"ques": "30. What is the order of namespaces in which Python looks for an identifier?\n", "op1": " Python first searches the built-in namespace, then the global namespace and finally the local namespace\n", "op2": " Python first searches the built-in namespace, then the local namespace and finally the global namespace\n", "op3": " Python first searches the local namespace, then the global namespace and finally the built-in namespace\n", "op4": " Python first searches the global namespace, then the local namespace and finally the built-in namespace\n"}, {"ques": "31. What will be the output of the following Python code snippet?", "code": "for i in [1, 2, 3, 4][::-1]:     print (i)", "op1": " 4 3 2 1\n", "op2": " error\n", "op3": " 1 2 3 4\n", "op4": " none of the mentioned\n"}, {"ques": "32. What will be the output of the following Python statement?", "exp": ">>>\"a\"+\"bc\"", "op1": " bc\n", "op2": " abc\n", "op3": " a\n", "op4": " bca\n"}, {"ques": "33. Which function is called when the following Python program is executed?", "code": "f = foo() format(f)", "op1": " str()\n", "op2": " format()\n", "op3": " __str__()\n", "op4": " __format__()\n"}, {"ques": "34. Which one of the following is not a keyword in Python language?\n", "op1": " pass\n", "op2": " eval\n", "op3": " assert\n", "op4": " nonlocal\n"}, {"ques": "35. What will be the output of the following Python code?", "code": "class tester:     def __init__(self, id):         self.id = str(id)         id=\"224\"   >>>temp = tester(12) >>>print(temp.id)", "op1": " 12\n", "op2": " 224\n", "op3": " None\n", "op4": " Error\n"}, {"ques": "36. What will be the output of the following Python program?", "code": "def foo(x):     x[0] = ['def']     x[1] = ['abc']     return id(x) q = ['abc', 'def'] print(id(q) == foo(q))", "op1": " Error\n", "op2": " None\n", "op3": " False\n", "op4": " True\n"}, {"ques": "37. Which module in the python standard library parses options received from the command line?\n", "op1": " getarg\n", "op2": " getopt\n", "op3": " main\n", "op4": " os\n"}, {"ques": "38. What will be the output of the following Python program?", "code": "z=set('abc') z.add('san') z.update(set(['p', 'q'])) z", "op1": " {\u2018a\u2019, \u2018c\u2019, \u2018c\u2019, \u2018p\u2019, \u2018q\u2019, \u2018s\u2019, \u2018a\u2019, \u2018n\u2019}\n", "op2": " {\u2018abc\u2019, \u2018p\u2019, \u2018q\u2019, \u2018san\u2019}\n", "op3": " {\u2018a\u2019, \u2018b\u2019, \u2018c\u2019, \u2018p\u2019, \u2018q\u2019, \u2018san\u2019}\n", "op4": " {\u2018a\u2019, \u2018b\u2019, \u2018c\u2019, [\u2018p\u2019, \u2018q\u2019], \u2018san}\n"}, {"ques": "39. What arithmetic operators cannot be used with strings in Python?\n", "op1": " *\n", "op2": " \u2013\n", "op3": " +\n", "op4": " All of the mentioned\n"}, {"ques": "40. What will be the output of the following Python code?", "code": "print(\"abc. DEF\".capitalize())", "op1": " Abc. def\n", "op2": " abc. def\n", "op3": " Abc. Def\n", "op4": " ABC. DEF\n"}, {"ques": "41. Which of the following statements is used to create an empty set in Python?\n", "op1": " ( )\n", "op2": " [ ] \n", "op3": " { }\n", "op4": " set()\n"}, {"ques": "42. What will be the value of \u2018result\u2019 in following Python program?", "codc": "list1 = [1,2,3,4] list2 = [2,4,5,6] list3 = [2,6,7,8] result = list() result.extend(i for i in list1 if i not in (list2+list3) and i not in result) result.extend(i for i in list2 if i not in (list1+list3) and i not in result) result.extend(i for i in list3 if i not in (list1+list2) and i not in result)", "op1": " [1, 3, 5, 7, 8] \n", "op2": " [1, 7, 8] \n", "op3": " [1, 2, 4, 7, 8] \n", "op4": " error\n"}, {"ques": "43. To add a new element to a list we use which Python command?\n", "op1": " list1.addEnd(5)\n", "op2": " list1.addLast(5)\n", "op3": " list1.append(5)\n", "op4": " list1.add(5)\n"}, {"ques": "44. What will be the output of the following Python code?", "code": "print('*', \"abcde\".center(6), '*', sep='')", "op1": " *  abcde *\n", "op2": " *abcde *\n", "op3": " * abcde*\n", "op4": " * abcde  *\n"}, {"ques": "45. What will be the output of the following Python code?", "code": ">>>list1 = [1, 3] >>>list2 = list1 >>>list1[0] = 4 >>>print(list2)", "op1": " [1, 4] \n", "op2": " [1, 3, 4] \n", "op3": " [4, 3] \n", "op4": " [1, 3] \n"}, {"ques": "46. Which one of the following is the use of function in python?\n", "op1": " Functions don\u2019t provide better modularity for your application\n", "op2": " you can\u2019t also create your own functions\n", "op3": " Functions are reusable pieces of programs\n", "op4": " All of the mentioned\n"}, {"ques": "47. Which of the following Python statements will result in the output: 6?", "code": "A = [[1, 2, 3],      [4, 5, 6],      [7, 8, 9]]", "op1": " A[2][1] \n", "op2": " A[1][2] \n", "op3": " A[3][2] \n", "op4": " A[2][3] \n"}, {"ques": "48. What is the maximum possible length of an identifier in Python?\n", "op1": " 79 characters\n", "op2": " 31 characters\n", "op3": " 63 characters\n", "op4": " none of the mentioned\n"}, {"ques": "49. What will be the output of the following Python program?", "code": "i = 0 while i < 5:     print(i)     i += 1     if i == 3:         break else:     print(0)", "op1": " error\n", "op2": " 0 1 2 0\n", "op3": " 0 1 2\n", "op4": " none of the mentioned\n"}, {"ques": "50. What will be the output of the following Python code?", "code": "x = 'abcd' for i in range(len(x)):     print(i)", "op1": " error\n", "op2": " 1 2 3 4\n", "op3": " a b c d\n", "op4": " 0 1 2 3\n"}, {"ques": "51. What are the two main types of functions in Python?\n", "op1": " System function\n", "op2": " Custom function\n", "op3": " Built-in function & User defined function\n", "op4": " User function\n"}, {"ques": "52. What will be the output of the following Python program?", "code": "def addItem(listParam):     listParam += [1]   mylist = [1, 2, 3, 4] addItem(mylist) print(len(mylist))", "op1": " 5\n", "op2": " 8\n", "op3": " 2\n", "op4": " 1\n"}, {"ques": "53. Which of the following is a Python tuple?\n", "op1": " {1, 2, 3}\n", "op2": " {}\n", "op3": " [1, 2, 3] \n", "op4": " (1, 2, 3)\n"}, {"ques": "54. What will be the output of the following Python code snippet?", "code": "z=set('abc$de') 'a' in z", "op1": " Error\n", "op2": " True\n", "op3": " False\n", "op4": " No output\n"}, {"ques": "55. What will be the output of the following Python expression?", "exp": "round(4.576)", "op1": " 4\n", "op2": " 4.6\n", "op3": " 5\n", "op4": " 4.5\n"}, {"ques": "56. Which of the following is a feature of Python DocString?\n", "op1": " In Python all functions should have a docstring\n", "op2": " Docstrings can be accessed by the __doc__ attribute on objects\n", "op3": " It provides a convenient way of associating documentation with Python modules, functions, classes, and methods\n", "op4": " All of the mentioned\n"}, {"ques": "57. What will be the output of the following Python code?", "code": "print(\"Hello {0[0]} and {0[1]}\".format(('foo', 'bin')))", "op1": " Hello (\u2018foo\u2019, \u2018bin\u2019) and (\u2018foo\u2019, \u2018bin\u2019)\n", "op2": " Error\n", "op3": " Hello foo and bin\n", "op4": " None of the mentioned\n"}, {"ques": "58. What is output of print(math.pow(3, 2))?\n", "op1": " 9.0\n", "op2": " None\n", "op3": " 9\n", "op4": " None of the mentioned\n"}, {"ques": "59. Which of the following is the use of id() function in python?\n", "op1": " Every object in Python doesn\u2019t have a unique id\n", "op2": " In Python Id function returns the identity of the object\n", "op3": " None of the mentioned\n", "op4": " All of the mentioned\n"}, {"ques": "60. What will be the output of the following Python code?", "code": "x = [[0], [1]] print((' '.join(list(map(str, x))),))", "op1": " 01\n", "op2": " [0] [1] \n", "op3": " (\u201901\u2019)\n", "op4": " (\u2018[0] [1]\u2019,)\n"}, {"ques": "61. The process of pickling in Python includes ____________\n", "op1": " conversion of a Python object hierarchy into byte stream\n", "op2": " conversion of a datatable into a list\n", "op3": " conversion of a byte stream into Python object hierarchy\n", "op4": " conversion of a list into a datatable\n"}, {"ques": "62. What will be the output of the following Python code?", "code": "def foo():     try:         return 1     finally:         return 2 k = foo() print(k)", "op1": " error, there is more than one return statement in a single try-finally block\n", "op2": " 3\n", "op3": " 2\n", "op4": " 1\n"}, {"ques": "1. What will be the output of the following Python code?\n\n", "code": "print('Hello!2@#World'.istitle())\"", "op1": " a) True", "op2": " b) False", "op3": " c) None", "op4": " d) error"}, {"ques": "2. What will be the output of the following Python code?\n\n", "code": "print('1Rn@'.lower())", "op1": " a) n", "op2": " b) 1rn@", "op3": " c) rn", "op4": " d) r"}, {"ques": "3. What will be the output of the following Python code?\n\n", "code": "print('''  \\tfoo'''.lstrip())", "op1": " a) \\tfoo", "op2": " b) foo", "op3": " c)    foo", "op4": " d) none of the mentioned"}, {"ques": "4. What will be the output of the following Python code?\n\n", "code": "print('xyyzxxyxyy'.lstrip('xyy'))", "op1": " a) error", "op2": " b) zxxyxyy", "op3": " c) z", "op4": " d) zxxy"}, {"ques": "5. What will be the output of the following Python code?\n\n", "code": "print('xyxxyyzxxy'.lstrip('xyy'))", "op1": " a) zxxy", "op2": " b) xyxxyyzxxy", "op3": " c) xyxzxxy", "op4": " d) none of the mentioned"}, {"ques": "6. What will be the output of the following Python code?\n\n", "code": "print('cba'.maketrans('abc', '123'))", "op1": " a) {97: 49, 98: 50, 99: 51}", "op2": " b) {65: 49, 66: 50, 67: 51}", "op3": " c) 321", "op4": " d) 123"}, {"ques": "7. What will be the output of the following Python code?\n\n", "code": "print('a'.maketrans('ABC', '123'))", "op1": " a) {97: 49, 98: 50, 99: 51}", "op2": " b) {65: 49, 66: 50, 67: 51}", "op3": " c) {97: 49}", "op4": " d) 1"}, {"ques": "8. What will be the output of the following Python code?\n\n", "code": "print('abcdef'.partition('cd'))", "op1": " a) (\u2018ab\u2019, \u2018ef\u2019)", "op2": " b) (\u2018abef\u2019)", "op3": " c) (\u2018ab\u2019, \u2018cd\u2019, \u2018ef\u2019)", "op4": " d) 2"}, {"ques": "9. What will be the output of the following Python code?\n\n", "code": "print('abcdefcdgh'.partition('cd'))", "op1": " a) (\u2018ab\u2019, \u2018cd\u2019, \u2018ef\u2019, \u2018cd\u2019, \u2018gh\u2019)", "op2": " b) (\u2018ab\u2019, \u2018cd\u2019, \u2018efcdgh\u2019)", "op3": " c) (\u2018abcdef\u2019, \u2018cd\u2019, \u2018gh\u2019)", "op4": " d) error"}, {"ques": "10. What will be the output of the following Python code?\n\n", "code": "print('abcd'.partition('cd'))", "op1": " a) (\u2018ab\u2019, \u2018cd\u2019, \u201d)", "op2": " b) (\u2018ab\u2019, \u2018cd\u2019)", "op3": " c) error", "op4": " d) none of the mentioned"}, {"ques": "11. What will be the output of the following Python code snippet?\n\n", "code": "print('cd'.partition('cd'))", "op1": " a) (\u2018cd\u2019)", "op2": " b) (\u201d)", "op3": " c) (\u2018cd\u2019, \u201d, \u201d)", "op4": " d) (\u201d, \u2018cd\u2019, \u201d)"}, {"ques": "12. What will be the output of the following Python code snippet?", "code": "cprint('abef'.partition('cd'))", "op1": " a) (\u2018abef\u2019)", "op2": " b) (\u2018abef\u2019) ", "op3": " c) (\u2018abef\u2019, \u201d, \u201d)", "op4": " d) error"}, {"ques": "13. What will be the output of the following Python code snippet?\n\n", "code": "print('abcdef12'.replace('cd', '12'))", "op1": " a) ab12ef12", "op2": " b) abcdef12", "op3": " c) ab12efcd", "op4": " d) none of the mentioned"}, {"ques": "14. What will be the output of the following Python code snippet?\n\n", "code": "print('abef'.replace('cd', '12'))", "op1": " a) abef", "op2": " b) 12", "op3": " c) error", "op4": " d) none of the mentioned"}, {"ques": "15. What will be the output of the following Python code snippet?\n\n", "code": "print('abcefd'.replace('cd', '12'))", "op1": " a) ab1ef2", "op2": " b) abcefd", "op3": " c) ab1efd", "op4": " d) ab12ed2"}, {"ques": "16. What will be the output of the following Python code snippet?\n\n", "code": "print('xyyxyyxyxyxxy'.replace('xy', '12', 0))", "op1": " a) xyyxyyxyxyxxy", "op2": " b) 12y12y1212x12", "op3": " c) 12yxyyxyxyxxy", "op4": " d) xyyxyyxyxyx12"}, {"ques": "17. What will be the output of the following Python code snippet?\n\n", "code": "print('xyyxyyxyxyxxy'.replace('xy', '12', 100))", "op1": " a) xyyxyyxyxyxxy", "op2": " b) 12y12y1212x12", "op3": " c) none of the mentioned", "op4": " d) error"}, {"ques": "18. What will be the output of the following Python code snippet?\n\n", "code": "print('abcdefcdghcd'.split('cd'))", "op1": " a) [\u2018ab\u2019, \u2018ef\u2019, \u2018gh\u2019]", "op2": " b) [\u2018ab\u2019, \u2018ef\u2019, \u2018gh\u2019, \u201d] ", "op3": " c) (\u2018ab\u2019, \u2018ef\u2019, \u2018gh\u2019)", "op4": " d) (\u2018ab\u2019, \u2018ef\u2019, \u2018gh\u2019, \u201d)"}, {"ques": "19. What will be the output of the following Python code snippet?\n\n", "code": "print('abcdefcdghcd'.split('cd', 0))", "op1": " a) [\u2018abcdefcdghcd\u2019] ", "op2": " b) \u2018abcdefcdghcd\u2019", "op3": " c) error", "op4": " d) none of the mentioned"}, {"ques": "20. What will be the output of the following Python code snippet?\n\n", "code": "print('abcdefcdghcd'.split('cd', -1))", "op1": " a) [\u2018ab\u2019, \u2018ef\u2019, \u2018gh\u2019]", "op2": " b) [\u2018ab\u2019, \u2018ef\u2019, \u2018gh\u2019, \u201d]", "op3": " c) (\u2018ab\u2019, \u2018ef\u2019, \u2018gh\u2019)", "op4": " d) (\u2018ab\u2019, \u2018ef\u2019, \u2018gh\u2019, \u201d) "}, {"ques": "21. What will be the output of the following Python code snippet?\n\n", "code": "print('abcdefcdghcd'.split('cd', 2))", "op1": " a) [\u2018ab\u2019, \u2018ef\u2019, \u2018ghcd\u2019] ", "op2": " b) [\u2018ab\u2019, \u2018efcdghcd\u2019] ", "op3": " c) [\u2018abcdef\u2019, \u2018ghcd\u2019] ", "op4": " d) none of the mentioned"}, {"ques": "22. What will be the output of the following Python code snippet?\n\n", "code": "print('ab\\ncd\\nef'.splitlines())", "op1": " a) [\u2018ab\u2019, \u2018cd\u2019, \u2018ef\u2019]", "op2": " b) [\u2018ab\\n\u2019, \u2018cd\\n\u2019, \u2018ef\\n\u2019] ", "op3": " c) [\u2018ab\\n\u2019, \u2018cd\\n\u2019, \u2018ef\u2019] ", "op4": " d) [\u2018ab\u2019, \u2018cd\u2019, \u2018ef\\n\u2019] "}, {"ques": "23. What will be the output of the following Python code snippet?\n\n", "code": "print('Ab!2'.swapcase())", "op1": " a) AB!@", "op2": " b) ab12", "op3": " c) aB!2", "op4": " d) aB1@"}, {"ques": "24. What will be the output of the following Python code snippet?\n\n", "code": "print('ab cd ef'.title())", "op1": " a) Ab cd ef", "op2": " b) Ab cd eF", "op3": " c) Ab Cd Ef", "op4": " d) None of the mentioned"}, {"ques": "25. What will be the output of the following Python code snippet?\n\n", "code": "print('ab cd-ef'.title())", "op1": " a) Ab cd-ef", "op2": " b) Ab Cd-ef", "op3": " c) Ab Cd-Ef", "op4": " d) None of the mentioned"}, {"ques": "26. What will be the output of the following Python code snippet?\n\n", "code": "print('abcd'.translate('a'.maketrans('abc', 'bcd')))", "op1": " a) bcde", "op2": " b) abcd", "op3": " c) error", "op4": " d) bcdd"}, {"ques": "27. What will be the output of the following Python code snippet?\n\n", "code": "print('abcd'.translate({97: 98, 98: 99, 99: 100}))", "op1": " a) bcde", "op2": " b) abcd", "op3": " c) error", "op4": " d) none of the mentioned"}, {"ques": "28. What will be the output of the following Python code snippet?\n\n", "code": "print('abcd'.translate({'a': '1', 'b': '2', 'c': '3', 'd': '4'}))", "op1": " a) abcd", "op2": " b) 1234", "op3": " c) error", "op4": " d) none of the mentioned"}, {"ques": "29. What will be the output of the following Python code snippet?\n", "code": "print('ab'.zfill(5))", "op1": " a) 000ab", "op2": " b) 00ab0", "op3": " c) 0ab00", "op4": " d) ab000"}, {"ques": "30. What will be the output of the following Python code snippet?\n\n", "code": "print('+99'.zfill(5))", "op1": " a) 00+99", "op2": " b) 00099", "op3": " c) +0099", "op4": " d) +++99"}, {"ques": "31. What will be the output of the following Python statement?", "code": ">>>\"a\"+\"bc\"", "op1": " a", "op2": "b) bc", "op3": "c) bca", "op4": "d) abc"}, {"ques": "32. What will be the output of the following Python statement?", "code": ">>>\"abcd\"[2:]", "op1": " a", "op2": "b) ab", "op3": "c) cd", "op4": "d) dc"}, {"ques": "33. The output of executing string.ascii_letters can also be achieved by:\n", "op1": " string.ascii_lowercase_string.digits", "op2": "b) string.ascii_lowercase+string.ascii_uppercase", "op3": "c) string.letters", "op4": "d) string.lowercase_string.uppercase"}, {"ques": "34. What will be the output of the following Python code?", "code": ">>> str1 = 'hello' >>> str2 = ',' >>> str3 = 'world' >>> str1[-1:]", "op1": " olleh", "op2": "b) hello", "op3": "c) h", "op4": "d) o"}, {"ques": "35. What arithmetic operators cannot be used with strings?\n\n", "op1": " +", "op2": "b) *", "op3": "c) -", "op4": "d) All of the mentioned"}, {"ques": "36. What will be the output of the following Python code?", "code": ">>>print (r\"\\nhello\")", "op1": " a new line and hello", "op2": "b) \\nhello", "op3": "c) the letter r and then hello", "op4": "d) error"}, {"ques": "37. What will be the output of the following Python statement?", "code": ">>>print('new' 'line')", "op1": " Error", "op2": "b) Output equivalent to print \u2018new\\nline\u2019", "op3": "c) newline", "op4": "d) new line"}, {"ques": "38. What will be the output of the following Python statement?", "code": ">>> print('x\\97\\x98')", "op1": " a)Error", "op2": "b) 97 98", "op3": "c) x\\97", "op4": "d) \\x97\\x98"}, {"ques": "39. What will be the output of the following Python code?", "code": ">>>str1=\"helloworld\" >>>str1[::-1]", "op1": " dlrowolleh", "op2": "b) hello", "op3": "c) world", "op4": "d) helloworld"}, {"ques": "40. What will be the output of the following Python code?", "code": "print(0xA + 0xB + 0xC)", "op1": " 0xA0xB0xC", "op2": "b) Error", "op3": "c) 0x22", "op4": "d) 33"}, {"ques": "41. What will be the output of the following Python code?\n        \n", "code": "class father:     def __init__(self, param):         self.o1 = param   class child(father):     def __init__(self, param):         self.o2 = param   >>>obj = child(22) >>>print \"%d %d\" % (obj.o1, obj.o2)", "op1": " a) None None", "op2": " b) None 22", "op3": " c) 22 None", "op4": " d) Error is generated"}, {"ques": "42. What will be the output of the following Python code?\n\n", "code": "class tester:     def __init__(self, id):         self.id = str(id)         id=\"224\"   >>>temp = tester(12) >>>print(temp.id)", "op1": " a) 224", "op2": " b) Error", "op3": " c) 12", "op4": " d) None"}, {"ques": "43. What will be the output of the following Python code?\n\n", "code": ">>>example = \"snow world\" >>>print(\"%s\" % example[4:7])", "op1": " a) wo", "op2": " b) world", "op3": " c) sn", "op4": " d) rl"}, {"ques": "44. What will be the output of the following Python code?", "code": ">>>example = \"snow world\" >>>example[3] = 's' >>>print example", "op1": " a) snow", "op2": " b) snow world", "op3": " c) Error", "op4": " d) snos world"}, {"ques": "45. What will be the output of the following Python code?", "code": ">>>max(\"what are you\")", "op1": " a) error", "op2": " b) u", "op3": " c) t", "op4": " d) y"}, {"ques": "46. Given a string example=\u201dhello\u201d what is the output of example.count(\u2018l\u2019)?\n", "op1": " a) 2", "op2": " b) 1", "op3": " c) None", "op4": " d) 0"}, {"ques": "47. What will be the output of the following Python code?\n\n", "code": ">>>example = \"helle\" >>>example.find(\"e\")", "op1": " a) Error", "op2": " b) -1", "op3": " c) 1", "op4": " d) 0"}, {"ques": "48. What will be the output of the following Python code?", "code": ">>>example = \"helle\" >>>example.rfind(\"e\")", "op1": " a) -1", "op2": " b) 4", "op3": " c) 3", "op4": " d) 1"}, {"ques": "49. What will be the output of the following Python code?\n\n", "code": ">>>example=\"helloworld\" >>>example[::-1].startswith(\"d\")", "op1": " a) dlrowolleh", "op2": " b) True", "op3": " c) -1", "op4": " d) None"}, {"ques": "50. To concatenate two strings to a third what statements are applicable?", "op1": " a) s3 = s1 . s2", "op2": " b) s3 = s1.add(s2)", "op3": " c) s3 = s1.__add__(s2)", "op4": " d) s3 = s1 * s2"}, {"ques": "51. What will be the output of the following Python statement?\n\n", "code": ">>>chr(ord('A'))", "op1": " a) A", "op2": " b) B", "op3": " c) a", "op4": " d) Error"}, {"ques": "52. What will be the output of the following Python statement?\n\n", "code": ">>>print(chr(ord('b')+1))", "op1": " a) a", "op2": " b) b", "op3": " c) c", "op4": " d) A"}, {"ques": "53. Which of the following statement prints hello\\example\\test.txt?\n", "op1": " a) print(\u201chello\\example\\test.txt\u201d)", "op2": " b) print(\u201chello\\\\example\\\\test.txt\u201d)", "op3": " c) printprint(\u201chello\\\u201dexample\\\u201dtest.txt\u201d)", "op4": " d) print(\u201chello\u201d\\example\u201d\\test.txt\u201d)"}, {"ques": "54.  Suppose s is \u201c\\t\\tWorld\\n\u201d, what is s.strip()?\n", "op1": " a) \\t\\tWorld\\n", "op2": " b) \\t\\tWorld\\n", "op3": " c) \\t\\tWORLD\\n", "op4": " d) World"}, {"ques": "55. The format function, when applied on a string returns ___________\n", "op1": " a) Error", "op2": " b) int", "op3": " c) bool", "op4": " d) str"}, {"ques": "56.What will be the output of the \u201chello\u201d +1+2+3?\n", "op1": " a) hello123", "op2": " b) hello", "op3": " c) Error", "op4": " d) hello6"}, {"ques": "57. What will be the output of the following Python code?\n\n", "code": ">>>print(\"D\", end = ' ') >>>print(\"C\", end = ' ') >>>print(\"B\", end = ' ') >>>print(\"A\", end = ' ')", "op1": " a) DCBA", "op2": " b) A, B, C, D", "op3": " c) D C B A", "op4": " d) D, C, B, A will be displayed on four lines"}, {"ques": "58. What will be the output of the following Python statement?(python 3.xx)\n\n", "code": ">>>print(format(\"Welcome\", \"10s\"), end = '#') >>>print(format(111, \"4d\"), end = '#') >>>print(format(924.656, \"3.2f\"))", "op1": " a) Welcome# 111#924.66", "op2": " b) Welcome#111#924.66", "op3": " c) Welcome#111#.66", "op4": " d) Welcome # 111#924.66"}, {"ques": "59.  What will be displayed by print(ord(\u2018b\u2019) \u2013 ord(\u2018a\u2019))?\n", "op1": " a) 0", "op2": " b) 1", "op3": " c) -1", "op4": " d) 2"}, {"ques": "60. Say s=\u201dhello\u201d what will be the return value of type(s)?\n", "op1": " a) int", "op2": " b) bool", "op3": " c) str", "op4": " d) String"}, {"ques": "61.  What is \u201cHello\u201d.replace(\u201cl\u201d, \u201ce\u201d)?\n\n", "op1": " a) Heeeo", "op2": " b) Heelo", "op3": " c) Heleo", "op4": " d) None"}, {"ques": "62. To retrieve the character at index 3 from string s=\u201dHello\u201d what command do we execute (multiple answers allowed).\n\n", "op1": " a) s[] ", "op2": " b) s.getitem(3)", "op3": " c) s.__getitem__(3)", "op4": " d) s.getItem(3)"}, {"ques": "63. To return the length of string s what command do we execute?\n\n", "op1": " a) s.__len__()", "op2": " b) len(s)", "op3": " c) size(s)", "op4": " d) s.size()"}, {"ques": "64. If a class defines the __str__(self) method, for an object obj for the class, you can use which command to invoke the __str__ method.\n\n", "op1": " a) obj.__str__()", "op2": " b) str(obj)", "op3": " c) print obj", "op4": " d) all of the mentioned"}, {"ques": "65. To check whether string s1 contains another string s2, use ________\n\n", "op1": " a) s1.__contains__(s2)", "op2": " b) s2 in s1", "op3": " c) s1.contains(s2)", "op4": " d) si.in(s2)"}, {"ques": "66. Suppose i is 5 and j is 4, i + j is same as ________\n\n", "op1": " a) i.__add(j)", "op2": " b) i.__add__(j)", "op3": " c) i.__Add(j)", "op4": " d) i.__ADD(j)"}, {"ques": "67. What will be the output of the following Python code?\n\n", "code": "class Count:     def __init__(self, count = 0):        self.__count = count   c1 = Count(2) c2 = Count(2) print(id(c1) == id(c2), end = \" \")   s1 = \"Good\" s2 = \"Good\" print(id(s1) == id(s2))", "op1": " a) True False", "op2": " b) True True", "op3": " c) False True", "op4": " d) False False"}, {"ques": "68. What will be the output of the following Python code?\n\n", "code": "class Name:     def __init__(self, firstName, mi, lastName):         self.firstName = firstName         self.mi = mi         self.lastName = lastName   firstName = \"John\" name = Name(firstName, 'F', \"Smith\") firstName = \"Peter\" name.lastName = \"Pan\" print(name.firstName, name.lastName)", "op1": " a) Peter Pan", "op2": " b) John Pan", "op3": " c) Peter Smith", "op4": " d) John Smith"}, {"ques": "69. What function do you use to read a string?\n\n", "op1": " a) input(\u201cEnter a string\u201d)", "op2": " b) eval(input(\u201cEnter a string\u201d))", "op3": " c) enter(\u201cEnter a string\u201d)", "op4": " d) eval(enter(\u201cEnter a string\u201d))"}, {"ques": "70. Suppose x is 345.3546, what is format(x, \u201c10.3f\u201d) (_ indicates space).\n\n", "op1": " a) __345.355", "op2": " b) ___345.355", "op3": " c) ____345.355", "op4": " d) _____345.354"}, {"ques": "71. What will be the output of the following Python code?\n\n", "code": "print(\"abc DEF\".capitalize())", "op1": " a) abc def", "op2": " b) ABC DEF", "op3": " c) Abc def", "op4": " d) Abc Def"}, {"ques": "72. What will be the output of the following Python code?\n\n", "code": "print(\"abc. DEF\".capitalize())", "op1": " a) abc. def", "op2": " b) ABC. DEF", "op3": " c) Abc. def", "op4": " d) Abc. Def"}, {"ques": "73. What will be the output of the following Python code?\n\n", "code": "print(\"abcdef\".center())", "op1": " a) cd", "op2": " b) abcdef", "op3": " c) error", "op4": " d) none of the mentioned"}, {"ques": "74. What will be the output of the following Python code?\n\n", "code": "print(\"abcdef\".center(0))", "op1": " a) cd", "op2": " b) abcdef", "op3": " c) error", "op4": " d) none of the mentioned"}, {"ques": "75. What will be the output of the following Python code?\n\n", "code": "print('*', \"abcdef\".center(7), '*')", "op1": " a) * abcdef  *", "op2": " b) *  abcdef *", "op3": " c) *abcdef *", "op4": " d) * abcdef*"}, {"ques": "76. What will be the output of the following Python code?\n\n", "code": "print('*', \"abcdef\".center(7), '*', sep='')", "op1": " a) * abcdef  *", "op2": " b) *  abcdef *", "op3": " c) *abcdef *", "op4": " d) * abcdef*"}, {"ques": "77. What will be the output of the following Python code?\n\n", "code": "print('*', \"abcde\".center(6), '*', sep='')", "op1": " a) * abcde  *", "op2": " b) *  abcde *", "op3": " c) *abcde *", "op4": " d) * abcde*"}, {"ques": "78. What will be the output of the following Python code?\n\n", "code": "print(\"abcdef\".center(7, 1))", "op1": " a) 1abcdef", "op2": " b) abcdef1", "op3": " c)  abcdef", "op4": " d) error"}, {"ques": "79. What will be the output of the following Python code?\n\n", "code": "print(\"abcdef\".center(7, '1'))", "op1": " a) 1abcdef", "op2": " b) abcdef1", "op3": " c)  abcdef", "op4": " d) error"}, {"ques": "80. What will be the output of the following Python code?\n", "code": "print(\"abcdef\".center(10, '12'))", "op1": " a) 12abcdef12", "op2": " b) abcdef1212", "op3": " c) 1212abcdef", "op4": " d) error"}, {"ques": "81. What will be the output of the following Python code?\n\n", "code": "print(\"xyyzxyzxzxyy\".count('yy'))", "op1": " a) 2", "op2": " b) 0", "op3": " c) error", "op4": " d) none of the mentioned"}, {"ques": "82. What will be the output of the following Python code?\n\n", "code": "print(\"xyyzxyzxzxyy\".count('yy', 1))", "op1": " a) 2", "op2": " b) 0", "op3": " c) 1", "op4": " d) none of the mentioned"}, {"ques": "83. What will be the output of the following Python code?\n\n", "code": "print(\"xyyzxyzxzxyy\".count('yy', 2))", "op1": " a) 2", "op2": " b) 0", "op3": " c) 1", "op4": " d) none of the mentioned"}, {"ques": "84. What will be the output of the following Python code?\n\n", "code": "print(\"xyyzxyzxzxyy\".count('xyy', 0, 100))", "op1": " a) 2", "op2": " b) 0", "op3": " c) 1", "op4": " d) error"}, {"ques": "85. What will be the output of the following Python code?\n\n", "code": "print(\"xyyzxyzxzxyy\".count('xyy', 2, 11))", "op1": " a) 2", "op2": " b) 0", "op3": " c) 1", "op4": " d) error"}, {"ques": "86. What will be the output of the following Python code?\n\n", "code": "print(\"xyyzxyzxzxyy\".count('xyy', -10, -1))", "op1": " a) 2", "op2": " b) 0", "op3": " c) 1", "op4": " d) error"}, {"ques": "87. What will be the output of the following Python code?\n\n", "code": "print('abc'.encode())", "op1": " a) abc", "op2": " b) \u2018abc\u2019", "op3": " c) b\u2019abc\u2019", "op4": " d) h\u2019abc\u2019 "}, {"ques": "88. What is the default value of encoding in encode()?\n", "op1": " a) ascii", "op2": " b) qwerty", "op3": " c) utf-8", "op4": " d) utf-16"}, {"ques": "89. What will be the output of the following Python code?\n\n", "code": "print(\"xyyzxyzxzxyy\".endswith(\"xyy\"))", "op1": " a) 1", "op2": " b) True", "op3": " c) 3", "op4": " d) 2"}, {"ques": "90. What will be the output of the following Python code?\n\n", "code": "print(\"xyyzxyzxzxyy\".endswith(\"xyy\", 0, 2))", "op1": " a) 0", "op2": " b) 1", "op3": " c) True", "op4": " d) False"}, {"ques": "91. What will be the output of the following Python code?\n\n", "code": "print(\"ab\\tcd\\tef\".expandtabs())", "op1": " a)ab\u2003\u2003cd\u2003\u2003ef", "op2": " b)abcdef", "op3": " c)ab\\tcd\\tef", "op4": " d)ab\u2003cd\u2003ef"}, {"ques": "92. What will be the output of the following Python code?\n\n", "code": "print(\"ab\\tcd\\tef\".expandtabs(4))", "op1": " a)ab\u2003  cd\u2003  ef", "op2": " b)abcdef", "op3": " c)ab\\tcd\\tef", "op4": " d)ab\u2003cd\u2003ef"}, {"ques": "93. What will be the output of the following Python code?\n\n\n", "code": "print(\"ab\\tcd\\tef\".expandtabs('+'))", "op1": " a)ab+cd+ef", "op2": " b)ab++++++++cd++++++++ef", "op3": " c)ab\u2003cd\u2003ef", "op4": " d) none of the mentioned"}, {"ques": "94. What will be the output of the following Python code?\n\n", "code": "print(\"abcdef\".find(\"cd\") == \"cd\" in \"abcdef\")", "op1": " a) True", "op2": " b) False", "op3": " c) Error", "op4": " d) None of the mentioned"}, {"ques": "95. What will be the output of the following Python code?\n\n", "code": "print(\"abcdef\".find(\"cd\"))", "op1": " a) True", "op2": " b) 2", "op3": " c) 3", "op4": " d) None of the mentioned"}, {"ques": "96. What will be the output of the following Python code?\n", "code": "print(\"ccdcddcd\".find(\"c\"))", "op1": " a) 4", "op2": " b) 0", "op3": " c) Error", "op4": " d) True"}, {"ques": "97. What will be the output of the following Python code?\n\n", "code": "print(\"Hello {0} and {1}\".format('foo', 'bin'))", "op1": " a) Hello foo and bin", "op2": " b) Hello {0} and {1} foo bin", "op3": " c) Error", "op4": " d) Hello 0 and 1"}, {"ques": "98. What will be the output of the following Python code?\n\n", "code": "print(\"Hello {1} and {0}\".format('bin', 'foo'))", "op1": " a) Hello foo and bin", "op2": " b) Hello bin and foo", "op3": " c) Error", "op4": " d) None of the mentioned"}, {"ques": "99. What will be the output of the following Python code?\n\n", "code": "print(\"Hello {} and {}\".format('foo', 'bin'))", "op1": " a) Hello foo and bin", "op2": " b) Hello {} and {}", "op3": " c) Error", "op4": " d) Hello and"}, {"ques": "100. What will be the output of the following Python code?\n\n", "code": "print(\"Hello {name1} and {name2}\".format('foo', 'bin'))", "op1": " a) Hello foo and bin", "op2": " b) Hello {name1} and {name2}", "op3": " c) Error", "op4": " d) Hello and"}, {"ques": "101. What will be the output of the following Python code?\n\n", "code": "print(\"Hello {name1} and {name2}\".format(name1='foo', name2='bin'))", "op1": " a) Hello foo and bin", "op2": " b) Hello {name1} and {name2}", "op3": " c) Error", "op4": " d) Hello and"}, {"ques": "102. What will be the output of the following Python code?\n\n", "code": "print(\"Hello {0!r} and {0!s}\".format('foo', 'bin'))", "op1": " a) Hello foo and foo", "op2": " b) Hello \u2018foo\u2019 and foo", "op3": " c) Hello foo and \u2018bin\u2019", "op4": " d) Error"}, {"ques": "103. What will be the output of the following Python code?\n\n", "code": "print(\"Hello {0} and {1}\".format(('foo', 'bin')))", "op1": " a) Hello foo and bin", "op2": " b) Hello (\u2018foo\u2019, \u2018bin\u2019) and (\u2018foo\u2019, \u2018bin\u2019)", "op3": " c) Error", "op4": " d) None of the mentioned"}, {"ques": "104. What will be the output of the following Python code?\n\n", "code": "print(\"Hello {0[0]} and {0[1]}\".format(('foo', 'bin')))", "op1": " a) Hello foo and bin", "op2": " b) Hello (\u2018foo\u2019, \u2018bin\u2019) and (\u2018foo\u2019, \u2018bin\u2019)", "op3": " c) Error", "op4": " d) None of the mentioned"}, {"ques": "105. What will be the output of the following Python code snippet?\n\n", "code": "print('The sum of {0} and {1} is {2}'.format(2, 10, 12))", "op1": " a) The sum of 2 and 10 is 12", "op2": " b) Error", "op3": " c) The sum of 0 and 1 is 2", "op4": " d) None of the mentioned"}, {"ques": "106. What will be the output of the following Python code snippet?\n\n", "code": "print('The sum of {0:b} and {1:x} is {2:o}'.format(2, 10, 12))", "op1": " a) The sum of 2 and 10 is 12", "op2": " b) The sum of 10 and a is 14", "op3": " c) The sum of 10 and a is c", "op4": " d) Error"}, {"ques": "107. What will be the output of the following Python code snippet?\n\n", "code": "print('{:,}'.format(1112223334))", "op1": " a) 1,112,223,334", "op2": " b) 111,222,333,4", "op3": " c) 1112223334", "op4": " d) Error"}, {"ques": "108. What will be the output of the following Python code snippet?", "code": "print('{:,}'.format('1112223334'))", "op1": " a) 1,112,223,334", "op2": " b) 111,222,333,4", "op3": " c) 1112223334", "op4": " d) Error"}, {"ques": "109. What will be the output of the following Python code snippet?\n\n", "code": "print('{:$}'.format(1112223334))", "op1": " a) 1,112,223,334", "op2": " b) 111,222,333,4", "op3": " c) 1112223334", "op4": " d) Error"}, {"ques": "110. What will be the output of the following Python code snippet?\n\n", "code": "print('{:#}'.format(1112223334))", "op1": " a) 1,112,223,334", "op2": " b) 111,222,333,4", "op3": " c) 1112223334", "op4": " d) Error"}, {"ques": "111. What will be the output of the following Python code?\n\n", "code": "print('{0:.2}'.format(1/3))", "op1": " a) 0.333333", "op2": " b) 0.33", "op3": " c) 0.333333:.2", "op4": " d) Error"}, {"ques": "112. What will be the output of the following Python code?\n\n", "code": "print('{0:.2%}'.format(1/3))", "op1": " a) 0.33", "op2": " b) 0.33%", "op3": " c) 33.33%", "op4": " d) 33%"}, {"ques": "113. What will be the output of the following Python code?\n\n", "code": "print('ab12'.isalnum())", "op1": " a) True", "op2": " b) False", "op3": " c) None", "op4": " d) Error"}, {"ques": "114. What will be the output of the following Python code?\n\n", "code": "print('ab,12'.isalnum())", "op1": " a) True", "op2": " b) False", "op3": " c) None", "op4": " d) Error"}, {"ques": "115. What will be the output of the following Python code?\n\n", "code": "print('ab'.isalpha())", "op1": " a) True", "op2": " b) False", "op3": " c) None", "op4": " d) Error"}, {"ques": "116. What will be the output of the following Python code?\n", "code": "print('a B'.isalpha())", "op1": " a) True", "op2": " b) False", "op3": " c) None", "op4": " d) Error"}, {"ques": "117. What will be the output of the following Python code snippet?\n\n", "code": "print('0xa'.isdigit())", "op1": " a) True", "op2": " b) False", "op3": " c) None", "op4": " d) Error"}, {"ques": "118. What will be the output of the following Python code snippet?\n\n", "code": "print(''.isdigit())", "op1": " a) True", "op2": " b) False", "op3": " c) None", "op4": " d) Error"}, {"ques": "119.What will be the output of the following Python code snippet?\n\n", "code": "print('my_string'.isidentifier())", "op1": " a) True", "op2": " b) False", "op3": " c) None", "op4": " d) Error"}, {"ques": "120. What will be the output of the following Python code snippet?\n\n", "code": "print('__foo__'.isidentifier())", "op1": " a) True", "op2": " b) False", "op3": " c) None", "op4": " d) Error"}, {"ques": "121. What will be the output of the following Python code snippet?\n\n", "code": "print('for'.isidentifier())", "op1": " a) True", "op2": " b) False", "op3": " c) None", "op4": " d) Error"}, {"ques": "122. What will be the output of the following Python code snippet?\n\n", "code": "print('abc'.islower())", "op1": " a) True", "op2": " b) False", "op3": " c) None", "op4": " d) Error"}, {"ques": "123. What will be the output of the following Python code snippet?\n\n", "code": "print('a@ 1,'.islower())", "op1": " a) True", "op2": " b) False", "op3": " c) None", "op4": " d) Error"}, {"ques": "124. What will be the output of the following Python code snippet?\n\n", "code": "print('11'.isnumeric())", "op1": " a) True", "op2": " b) False", "op3": " c) None", "op4": " d) Error"}, {"ques": "125. What will be the output of the following Python code snippet?\n\n", "code": "print('1.1'.isnumeric())", "op1": " a) True", "op2": " b) False", "op3": " c) None", "op4": " d) Error"}, {"ques": "126. What will be the output of the following Python code snippet?\n\n", "code": "print('1@ a'.isprintable())", "op1": " a) True", "op2": " b) False", "op3": " c) None", "op4": " d) Error"}, {"ques": "127. What will be the output of the following Python code snippet?\n\n", "code": "print(''''''.isspace())", "op1": " a) True", "op2": " b) False", "op3": " c) None", "op4": " d) Error"}, {"ques": "128. What will be the output of the following Python code snippet?\n\n", "code": "print('\\t'.isspace())", "op1": " a) True", "op2": " b) False", "op3": " c) None", "op4": " d) Error"}, {"ques": "129. What will be the output of the following Python code snippet?\n\n", "code": "print('HelloWorld'.istitle())", "op1": " a) True", "op2": " b) False", "op3": " c) None", "op4": " d) Error"}, {"ques": "130. What will be the output of the following Python code snippet?\n\n", "code": "print('Hello World'.istitle())", "op1": " a) True", "op2": " b) False", "op3": " c) None", "op4": " d) Error"}]
